"""
Ваша задача — создать 2 конкурентно работающих счетчика, каждый из которых остановится, достигнув указанного значения.
Это задание поможет вам лучше понять, как использовать асинхронные задачи и состояния в асинхронном программировании на Python.

Словарь max_counts хранит максимальное значение, до которого каждый счетчик должен быть инкрементирован.

# Counter 1 - имя счётчика
# 13 - максимальное значение для счётчика Counter_1

max_counts = {
    "Counter 1": 13,
    "Counter 2": 7
}
Рекомендации:

Создайте словарь counters, где ключи — это имена счётчиков ("Counter 1" и "Counter 2"),
 а значения —  это текущие значения счётчиков, изначально равные нулю.
Используйте словарь max_counts, где ключи представляют собой имена счётчиков,
 а значения — это максимальное число, до которого каждый счётчик должен подсчитать.
Напишите асинхронную функцию counter, которая принимает имя счётчика и задержку.
 В цикле эта функция должна увеличивать значение соответствующего счётчика в словаре counters на 1,
 затем делать паузу на заданное количество секунд, затем выводить сообщение с именем счетчика и его текущим значением.
  Этот цикл должен продолжаться до тех пор, пока значение счётчика не достигнет соответствующего значения в словаре max_counts.
В асинхронной функции main создайте две задачи с использованием asyncio.create_task(),
каждая из которых будет выполнять функцию counter с разными именами счётчиков, но с одинаковой фиксированной задержкой.
Эта функция должна ожидать завершения обеих задач.
"""
import asyncio

max_counts = {
    "Counter 1": 13,
    "Counter 2": 7
}

counters = {
    "Counter 1": 0,
    "Counter 2": 0
}


async def counter(name, delay):
    while counters[name] < max_counts[name]:
        counters[name] += 1
        await asyncio.sleep(delay)
        print(f"{name}: {counters[name]}")


async def main():
    task1 = asyncio.create_task(counter("Counter 1", 1))
    task2 = asyncio.create_task(counter("Counter 2", 1))
    await task1
    await task2

asyncio.run(main())
